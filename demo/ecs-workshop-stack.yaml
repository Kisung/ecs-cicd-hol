Resources:
  ContainerHol477C4333:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ecs-workshop/ContainerHol
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/Resource
  ContainerHolHolSubnet1Subnet0F08B5CB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: ContainerHol477C4333
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Hol
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ecs-workshop/ContainerHol/HolSubnet1
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet1/Subnet
  ContainerHolHolSubnet1RouteTableE13167C7:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ContainerHol477C4333
      Tags:
        - Key: Name
          Value: ecs-workshop/ContainerHol/HolSubnet1
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet1/RouteTable
  ContainerHolHolSubnet1RouteTableAssociation819EA0DB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ContainerHolHolSubnet1RouteTableE13167C7
      SubnetId:
        Ref: ContainerHolHolSubnet1Subnet0F08B5CB
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet1/RouteTableAssociation
  ContainerHolHolSubnet1DefaultRoute3478911B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: ContainerHolHolSubnet1RouteTableE13167C7
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ContainerHolIGW328B4786
    DependsOn:
      - ContainerHolVPCGWB3227056
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet1/DefaultRoute
  ContainerHolHolSubnet2Subnet09F2D068:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: ContainerHol477C4333
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Hol
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: ecs-workshop/ContainerHol/HolSubnet2
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet2/Subnet
  ContainerHolHolSubnet2RouteTable294E85D5:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: ContainerHol477C4333
      Tags:
        - Key: Name
          Value: ecs-workshop/ContainerHol/HolSubnet2
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet2/RouteTable
  ContainerHolHolSubnet2RouteTableAssociation4FC8AEAA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: ContainerHolHolSubnet2RouteTable294E85D5
      SubnetId:
        Ref: ContainerHolHolSubnet2Subnet09F2D068
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet2/RouteTableAssociation
  ContainerHolHolSubnet2DefaultRouteC117DB1D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: ContainerHolHolSubnet2RouteTable294E85D5
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: ContainerHolIGW328B4786
    DependsOn:
      - ContainerHolVPCGWB3227056
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/HolSubnet2/DefaultRoute
  ContainerHolIGW328B4786:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ecs-workshop/ContainerHol
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/IGW
  ContainerHolVPCGWB3227056:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ContainerHol477C4333
      InternetGatewayId:
        Ref: ContainerHolIGW328B4786
    Metadata:
      aws:cdk:path: ecs-workshop/ContainerHol/VPCGW
  sgfrom00000808ED43576:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      Description: from 0.0.0.0/0:80
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - ContainerHol477C4333
          - DefaultSecurityGroup
      ToPort: 80
    Metadata:
      aws:cdk:path: ecs-workshop/sg/from 0.0.0.0_0:80
  sgfrom0000080803250D35C:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      Description: from 0.0.0.0/0:8080
      FromPort: 8080
      GroupId:
        Fn::GetAtt:
          - ContainerHol477C4333
          - DefaultSecurityGroup
      ToPort: 8080
    Metadata:
      aws:cdk:path: ecs-workshop/sg/from 0.0.0.0_0:8080
  containerholC45D504C:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      InstanceType: t2.micro
      Name: containerhol
      SubnetId:
        Ref: ContainerHolHolSubnet1Subnet0F08B5CB
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol/Resource
  containerholwebappholEC273DE7:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: containerhol/webapphol
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol--webapphol/Resource
  containerholcodecommitF096B31B:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: containerhol
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-codecommit/Resource
  containerholecs20A7F4BD:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ContainverHol
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/Resource
  containerholecsDefaultCapacityInstanceSecurityGroup4069DC01:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ecs-workshop/containerhol-ecs/DefaultCapacity/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
      VpcId:
        Ref: ContainerHol477C4333
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/InstanceSecurityGroup/Resource
  containerholecsDefaultCapacityInstanceRole8BD5AA6A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Tags:
        - Key: Name
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/InstanceRole/Resource
  containerholecsDefaultCapacityInstanceRoleDefaultPolicy7B3E451A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: containerholecsDefaultCapacityInstanceRoleDefaultPolicy7B3E451A
      Roles:
        - Ref: containerholecsDefaultCapacityInstanceRole8BD5AA6A
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/InstanceRole/DefaultPolicy/Resource
  containerholecsDefaultCapacityInstanceProfile50D649E7:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: containerholecsDefaultCapacityInstanceRole8BD5AA6A
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/InstanceProfile
  containerholecsDefaultCapacityLaunchConfig3F499058:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: m5n.large
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: containerholecsDefaultCapacityInstanceProfile50D649E7
      SecurityGroups:
        - Fn::GetAtt:
            - containerholecsDefaultCapacityInstanceSecurityGroup4069DC01
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - >-
                #!/bin/bash

                echo ECS_CLUSTER=
              - Ref: containerholecs20A7F4BD
              - >-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP

                sudo service iptables save

                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config
    DependsOn:
      - containerholecsDefaultCapacityInstanceRoleDefaultPolicy7B3E451A
      - containerholecsDefaultCapacityInstanceRole8BD5AA6A
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/LaunchConfig
  containerholecsDefaultCapacityASG547AEC4A:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize: "2"
      MinSize: "1"
      DesiredCapacity: "2"
      LaunchConfigurationName:
        Ref: containerholecsDefaultCapacityLaunchConfig3F499058
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
      VPCZoneIdentifier:
        - Ref: ContainerHolHolSubnet1Subnet0F08B5CB
        - Ref: ContainerHolHolSubnet2Subnet09F2D068
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/ASG
  containerholecsDefaultCapacityDrainECSHookFunctionServiceRole357DD9E9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/DrainECSHook/Function/ServiceRole/Resource
  containerholecsDefaultCapacityDrainECSHookFunctionServiceRoleDefaultPolicy684A83B6:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:us-west-2:"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: containerholecsDefaultCapacityASG547AEC4A
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - containerholecs20A7F4BD
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - containerholecs20A7F4BD
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: containerholecsDefaultCapacityDrainECSHookFunctionServiceRoleDefaultPolicy684A83B6
      Roles:
        - Ref: containerholecsDefaultCapacityDrainECSHookFunctionServiceRole357DD9E9
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource
  containerholecsDefaultCapacityDrainECSHookFunctionA4DC5388:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          import boto3, json, os, time


          ecs = boto3.client('ecs')

          autoscaling = boto3.client('autoscaling')



          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - containerholecsDefaultCapacityDrainECSHookFunctionServiceRole357DD9E9
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: containerholecs20A7F4BD
      Tags:
        - Key: Name
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
      Timeout: 310
    DependsOn:
      - containerholecsDefaultCapacityDrainECSHookFunctionServiceRoleDefaultPolicy684A83B6
      - containerholecsDefaultCapacityDrainECSHookFunctionServiceRole357DD9E9
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/DrainECSHook/Function/Resource
  containerholecsDefaultCapacityDrainECSHookFunctionAllowInvokeecsworkshopcontainerholecsDefaultCapacityLifecycleHookDrainHookTopicEF6BD2DC8099273D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - containerholecsDefaultCapacityDrainECSHookFunctionA4DC5388
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: containerholecsDefaultCapacityLifecycleHookDrainHookTopicBDC5A5A4
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/DrainECSHook/Function/AllowInvoke:ecsworkshopcontainerholecsDefaultCapacityLifecycleHookDrainHookTopicEF6BD2DC
  containerholecsDefaultCapacityDrainECSHookFunctionTopic00B48CA1:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: containerholecsDefaultCapacityLifecycleHookDrainHookTopicBDC5A5A4
      Endpoint:
        Fn::GetAtt:
          - containerholecsDefaultCapacityDrainECSHookFunctionA4DC5388
          - Arn
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/DrainECSHook/Function/Topic/Resource
  containerholecsDefaultCapacityLifecycleHookDrainHookRole9CB19747:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/LifecycleHookDrainHook/Role/Resource
  containerholecsDefaultCapacityLifecycleHookDrainHookRoleDefaultPolicy7AD87D26:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: containerholecsDefaultCapacityLifecycleHookDrainHookTopicBDC5A5A4
        Version: "2012-10-17"
      PolicyName: containerholecsDefaultCapacityLifecycleHookDrainHookRoleDefaultPolicy7AD87D26
      Roles:
        - Ref: containerholecsDefaultCapacityLifecycleHookDrainHookRole9CB19747
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/LifecycleHookDrainHook/Role/DefaultPolicy/Resource
  containerholecsDefaultCapacityLifecycleHookDrainHookTopicBDC5A5A4:
    Type: AWS::SNS::Topic
    Properties:
      Tags:
        - Key: Name
          Value: ecs-workshop/containerhol-ecs/DefaultCapacity
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/LifecycleHookDrainHook/Topic/Resource
  containerholecsDefaultCapacityLifecycleHookDrainHookC5D6CEA7:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: containerholecsDefaultCapacityASG547AEC4A
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: containerholecsDefaultCapacityLifecycleHookDrainHookTopicBDC5A5A4
      RoleARN:
        Fn::GetAtt:
          - containerholecsDefaultCapacityLifecycleHookDrainHookRole9CB19747
          - Arn
    DependsOn:
      - containerholecsDefaultCapacityLifecycleHookDrainHookRoleDefaultPolicy7AD87D26
      - containerholecsDefaultCapacityLifecycleHookDrainHookRole9CB19747
    Metadata:
      aws:cdk:path: ecs-workshop/containerhol-ecs/DefaultCapacity/LifecycleHookDrainHook/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.47.0,@aws-cdk/assets=1.47.0,@aws-cdk/aws-apigateway=1.47.0,@aws-cdk/aws-applicationautoscaling=1.47.0,@aws-cdk/aws-autoscaling=1.47.0,@aws-cdk/aws-autoscaling-common=1.47.0,@aws-cdk/aws-autoscaling-hooktargets=1.47.0,@aws-cdk/aws-certificatemanager=1.47.0,@aws-cdk/aws-cloud9=1.47.0,@aws-cdk/aws-cloudformation=1.47.0,@aws-cdk/aws-cloudfront=1.47.0,@aws-cdk/aws-cloudwatch=1.47.0,@aws-cdk/aws-codecommit=1.47.0,@aws-cdk/aws-cognito=1.47.0,@aws-cdk/aws-ec2=1.47.0,@aws-cdk/aws-ecr=1.47.0,@aws-cdk/aws-ecr-assets=1.47.0,@aws-cdk/aws-ecs=1.47.0,@aws-cdk/aws-elasticloadbalancing=1.47.0,@aws-cdk/aws-elasticloadbalancingv2=1.47.0,@aws-cdk/aws-events=1.47.0,@aws-cdk/aws-iam=1.47.0,@aws-cdk/aws-kms=1.47.0,@aws-cdk/aws-lambda=1.47.0,@aws-cdk/aws-logs=1.47.0,@aws-cdk/aws-route53=1.47.0,@aws-cdk/aws-route53-targets=1.47.0,@aws-cdk/aws-s3=1.47.0,@aws-cdk/aws-s3-assets=1.47.0,@aws-cdk/aws-sam=1.47.0,@aws-cdk/aws-secretsmanager=1.47.0,@aws-cdk/aws-servicediscovery=1.47.0,@aws-cdk/aws-sns=1.47.0,@aws-cdk/aws-sns-subscriptions=1.47.0,@aws-cdk/aws-sqs=1.47.0,@aws-cdk/aws-ssm=1.47.0,@aws-cdk/cloud-assembly-schema=1.47.0,@aws-cdk/core=1.47.0,@aws-cdk/custom-resources=1.47.0,@aws-cdk/cx-api=1.47.0,@aws-cdk/region-info=1.47.0,jsii-runtime=Python/3.7.3
Parameters:
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

